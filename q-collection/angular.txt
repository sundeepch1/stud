1. Angular life cycle hook.
1. ngOnChanges():Respond when Angular sets or resets data-bound input properties. The method receives a SimpleChanges object of current and previous property values.
2. ngOnInit(): Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties. See details in Initializing a component or directive in this document.
3. ngDoCheck():Detect and act upon changes that Angular can't or won't detect on its own. See details and example in Defining custom change detection in this document.
4. ngOnDestroy():Cleanup just before Angular destroys the directive or component. Unsubscribe Observables and detach event handlers to avoid memory leaks. See details in Cleaning up on instance destruction in this document.

2. Module vs components
Components control views (html). They also communicate with other components and services to bring functionality to your app.
Modules consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app.

getPalindrome(String str){

	Map<Character, Integer> map = new HashMap<String, Integer>();
	char[] letter = str.toCharArray()
	for(char c: letter){
		if(map.contains(c)){
			map.put(c.toString, map.get(c) + 1);		
		}else{
			map.put(c, 1);		
		}	
	}
	
	int count = 0;
	char ch = ''; 
	for(Map.Entry<String, Integer> entry: map.entrySet()){
		if(entry.getValue() %2 != 0 ){
			count ++;
			ch = entry.getKey()		
		}	
	}

	String str = "";

	if(oddCount > 1 || oddCount == 1 && str.length() % 2 == 0){
		sysout("Palindropme is not possible")	
	}else{
		for(int i = 1=0; i< str.length; i++){
					
		}
	}
}



































































































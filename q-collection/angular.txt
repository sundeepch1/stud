1. Angular life cycle hook.
1. ngOnChanges():Respond when Angular sets or resets data-bound input properties. The method receives a SimpleChanges object of current and previous property values.
2. ngOnInit(): Initialize the directive or component after Angular first displays the data-bound properties and sets the directive or component's input properties. See details in Initializing a component or directive in this document.
3. ngDoCheck():Detect and act upon changes that Angular can't or won't detect on its own. See details and example in Defining custom change detection in this document.
4. ngOnDestroy():Cleanup just before Angular destroys the directive or component. Unsubscribe Observables and detach event handlers to avoid memory leaks. See details in Cleaning up on instance destruction in this document.

2. Module vs components
Components control views (html). They also communicate with other components and services to bring functionality to your app.
Modules consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app.

3. Comparison between Angular and AngularJS:
Architecture:
Angular JS: Supports Model-View-Controller design. The view processes the information available in the model to generate the output.
Angular: Uses components and directives. Components are the directives with a template.
Written:
Angular JS: Written in JavaScript.
Angular: Written in Microsoft’s TypeScript language, which is a superset of ECMAScript 6 (ES6).
Mobile support:
Angular JS: Does not supported by mobile browsers.
Angular: But Angular supported by all the popular mobile browsers.
Expression Syntax:
Angular JS:ng-bind is used to bind data from view to model and vice versa.
Angular: Properties enclosed in “()” and “[]” are used to bind data b/w view and model.
Dependency Injection:
Angular JS: Does not use Dependency Injection.
Angular: Hierarchical Dependency Injection system used.
Routing:
Angular JS: AngularJS uses $routeprovider.when() for routing configuration.
Angular: Angular uses @Route Config{(…)} for routing configuration.
Structure:
Angular JS: It is less manageable in comparison to Angular.
Angular: Better structure compare to AngularJS, easier to create and maintain large applications but behind in AngularJS in case of small applications.




































































































video start from 36-45
https://www.javaguides.net/2018/10/20-free-open-source-projects-using-spring-framework.html
https://github.com/spring-projects/spring-framework/releases
1. What is spring framework?
1. Spring is a powerful open source, application framework created to reduce the complexity of enterprise application development. 
2. It is light-weighted and loosely coupled. 
3. It has layered architecture, which allows you to select the components to use, while also providing a cohesive framework for J2EE application development. 
4.Spring framework is also called the framework of frameworks as it provides support to various other frameworks such as Struts, Hibernate, Tapestry, EJB, JSF etc.

2. What are the different features of Spring Framework?
Following are some of the major features of Spring Framework :
Lightweight: Spring is lightweight when it comes to size and transparency. 
Inversion of control (IOC): The objects give their dependencies instead of creating or looking for dependent objects. This is called Inversion Of Control.
Aspect oriented Programming (AOP): Aspect oriented programming in Spring supports cohesive development by separating application business logic from system services.
Container: Spring Framework creates and manages the life cycle and configuration of the application objects.
MVC Framework: Spring Framework’s MVC web application framework is highly configurable. Other frameworks can also be used easily instead of Spring MVC Framework.
Transaction Management: Generic abstraction layer for transaction management is provided by the Spring Framework. Spring’s transaction support can be also used in container less environments.
JDBC Exception Handling: The JDBC abstraction layer of the Spring offers an exception hierarchy, which simplifies the error handling strategy.

3.What do you mean by Dependency Injection? 
In Dependency Injection, you do not have to create your objects but have to describe how they should be created. You don’t connect your components and services together in the code directly, but describe which services are needed by which components in the configuration file. The IoC container will wire them up together.

4. Differentiate between constructor injection and setter injection.
There is no partial injection.	
It doesn’t override the setter property.
It will create a new instance if any modification is done.
It works better for many properties.	
=>vs
There can be partial injection.
It overrides the constructor property.
It will not create new instance if any modification is done.
It works better for few properties.

method dependancy injection 

#The ApplicationContext:-
It is the central interface within a Spring application for providing configuration information to the application. The ApplicationContext interface provides the getBean() method to retrieve bean from the spring container.

5. Differentiate between BeanFactory and ApplicationContext.
It is an interface defined in org.springframework.beans.factory.
It uses Lazy initialization.
It explicitly provides a resource object using the syntax.
It doesn’t supports internationalization.
It doesn’t supports annotation based dependency.
=>vs
It is an interface defined in org.springframework.context.ApplicationContext.
It uses Eager/ Aggressive initialization.
It creates and manages resource objects on its own.
It supports internationalization.
It supports annotation based dependency.

6. How configuration metadata is provided to the Spring container?
XML-Based configuration:
Annotation-Based configuration:
java-Based configuration: @Bean annotation plays the same role as the <bean/> element. @Configuration classes allows to define inter-bean dependencies by simply calling other @Bean methods in the same class. 

7. How many bean scopes are supported by Spring?
The Spring Framework supports five scopes. They are:
Singleton: This provides scope for the bean definition to single instance per Spring IoC container.
Prototype: This provides scope for a single bean definition to have any number of object instances.
Request: This provides scope for a bean definition to an HTTP-request. 
Session: This provides scope for a bean definition to an HTTP-session.
Application:-This provides scope for a bean definition to an Global HTTP-session. 
Global-session: for portlet
WebSocket:

8. Explain inner beans in Spring.
A bean can be declared as an inner bean only when it is used as a property of another bean. For defining a bean, the Spring’s XML based configuration metadata provides the use of <bean> element inside the <property> or <constructor-arg>. Inner beans are always anonymous and they are always scoped as prototypes.

9. Define Bean Wiring.
When beans are combined together within the Spring container, it’s called wiring or bean wiring. The Spring container needs to know what beans are needed and how the container should use dependency injection to tie the beans together, while wiring beans.

10. What do you understand by auto wiring(mode) and name the different modes of it?
The Spring container is able to autowire relationships between the collaborating beans. That is, it is possible to let Spring resolve collaborators for your bean automatically by inspecting the contents of the BeanFactory.
Different modes of bean auto-wiring are:

no: .This is default setting which means no autowiring. Explicit bean reference should be used for wiring. You have nothing to do special for this wiring. This is what you have already seen in dependancy injection. 

byName: Autowiring by property name. Spring container looks at the properties of the beans on which autowire is set byName in the XML configuration file. It then tries to match and wire its properties with the beans defined by the same names in the configuration file. It injects the object dependency according to name of the bean. It matches and wires its properties with the beans defined by the same names in the XML file.

byType:Autowiring by property datatype. Spring container looks at the properties of the beans on which autowire attribute is set byType in the XML configuration file. It then tries to match and wire a property if its type matches with exactly one of the beans name in the configuration file. if more than one such beans exists, a fatal exception is throwns. It injects the object dependency according to type. It matches and wires a property if its type matches with exactly one of the beans name in XML file.NoUniqueBeanDefinitionException

constructor:Similar to byType, but applies to contructor arguments. if there is not exactly one bean of the constructor aegument type in the container, a fatal error is raised. It injects the dependency by calling the constructor of the class. It has a large number of parameters.

autodetect: First the container tries to wire using autowire by constructor, if it can’t then it tries to autowire by byType.

11. What are the limitations with auto wiring?
Following are some of the limitations you might face with auto wiring:

Overriding possibility: You can always specify dependencies using <constructor-arg> and <property> settings which will override autowiring.
 Primitive data type: Simple properties such as primitives, Strings and Classes can’t be autowired.
Confusing nature: Always prefer using explicit wiring because autowiring is less precise.

12. What’s the difference between @Component, @Controller, @Repository & @Service annotations in Spring?annotations?
@Component: This marks a java class as a bean. It is a generic stereotype for any Spring-managed component. The component-scanning mechanism of spring now can pick it up and pull it into the application context.

@Controller: This marks a class as a Spring Web MVC controller. Beans marked with it are automatically imported into the Dependency Injection container.

@Service: This annotation is a specialization of the component annotation. It doesn’t provide any additional behavior over the @Component annotation. You can use @Service over @Component in service-layer classes as it specifies intent in a better way.

Powered by EdurekaMock Interview
Mock interviews for you
Interviews by Industry ExpertsPersonalized detailed interview feedbackAccess to exclusive and curated content
@Repository: This annotation is a specialization of the @Component annotation with similar use and functionality. It provides additional benefits specifically for DAOs. It imports the DAOs into the DI container and makes the unchecked exceptions eligible for translation into Spring DataAccessException.

13. What do you understand by @Required annotation?
@Required is applied to bean property setter methods. This annotation simply indicates that the affected bean property must be populated at the configuration time with the help of an explicit property value in a bean definition or with autowiring. If the affected bean property has not been populated, the container will throw BeanInitializationException.

14. What do you understand by @Qualifier annotation?
When you create more than one bean of the same type and want to wire only one of them with a property  you can use the @Qualifier annotation along with @Autowired to remove the ambiguity by specifying which exact bean should be wired.

15. Spring IOC Container
The spring container is core of spring framework. 
Spring provides two types container
1. BeanFactory container:- when you request for the bean then bean definition and properties description are loaded. Bean themselves are intantiated and their properties are set only when they are requested such as by getBean method.
Object getBean(String)
Boolean containsBean(String)
Object getBean(String, Class)
Boolean isSinglton(String)
String[] getAlieses(String);
Class getType(String name) :- NoSuchBeanDefinitionException
2. ApplicationContext container:-
ClassPathXmlApplicationContext
FileSystemXmlApplicationContext
WebXmlApplicationContext
3. ListableBeanFactory
4. ConfigurableBean Factory

16. Life-cycle of bean creation callback methods
by interface
IntializingBean, DisposableBean
by xml file
init-method
destroy-method
by annotation 
@PostConstruct
@PreDestroy

17. Spring offers five types of collection configuration elements
1. Array
2. List
3. Set
4. Map
5. Properties

18. BeanPostProcessor callback interface
The BeanPostProcessor interface defines callback methods that you can implement to provide your own instantiation logic, dependency-resolution logic, etc. You can also implement some custom logic after the Spring container finishes instantiating, configuring, and initializing a bean by plugging in one or more BeanPostProcessor implementations.You can configure multiple BeanPostProcessor interfaces and you can control the order in which these BeanPostProcessor interfaces execute by setting the order property provided the BeanPostProcessor implements the Ordered interface.

19. Spring-built in events
1. ContextRefreshedEvent :- This event is published when the ApplicationContext is initialised or refreshed. This can also be raised using refresh() method on the ConfigurableApplicationContext interface.
2. ContextStartedEvent :- This event is published when the ApplicationContext is started using the start() method on the ConfigurableApplicationContext interface. You can poll your database or you can restart/start any stopped application after receiving this event.
3. ContextStoppedEvent:-This event is published when the ApplicationContext is stopped using the stop() method on the ConfigurableApplicationContext interface. You can do required housekeeping work after receiving this event.
4. ContextClosedEvent:- This event is published when the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface. A closed context reaches its end of life; it can not be refreshed or restarted.
5. ContextHandledEvent:- This is a web-specifc event telling all beans that an HTTP request has been serviced.

Listening to Context Events:-
To list a context event, a bean should implement the ApplicationListener interface which has just one method onApplicationEvent.

20. method dependecy injection, p namespace
21. Some important annotation in spring framework.
1.@Required:- The @Required annotation applies to bean property setter methods.(BeanCreationException, BeanInitializationException)
2. @Autowired:- The @Autowired annotation can apply to bean property setter methods, non-setter methods, constructor and properties. 	@Autowired(required=false)
3. @Qualifier:- The @Quilifier annotation along with @Autowired can be used to remove the confusion by specifying which exact bean will be wired. 
4. JSR-250 Annotation(Java Specification Request):- Spring supports JSR-250 based annotation which include @Resource. @PostConstruct and @PreDestroy annotations.
5. @service:-Annotate all yours service classes with @Service. All your business logic should be in service classes.
6. @Repository:- Annotate all your DAO classes with @Repository. All your database access logic should be in DAO classes.
7. @Controller:- Annotate your other components(for example REST resource classes) with @Controller.
8. @Component:- Annotate your other components(for example REST resource classes) with @Component. @Component is generic stereotype for any spring managed componenet. While other stereotypes like @Repository, @Controller, @Service are speciliazed form of @Component for specific use.
9. @Resource(name="byName"):-The @Resource annotation is part of the JSR-250 annotation collection and is packaged with Jakarta EE. It is used to resolve the dependency injection only by name.Match by Name, Match by Type, Match by Qualifier. annotation based on JSR-250. @Resource is quite similar to @Autowired and @Inject, but the main difference is the execution paths taken to find out the required bean to inject. @Resource will narrow down the search first by name then by type and finally by Qualifiers (ignored if match is found by name). 
@Autowired and @Inject will narrow down the search first by type then by qualifier and finally by the name.(not used on constructor)
10. @Inject:-The @Inject annotation belongs to the JSR-330 annotations collection. This annotation has the following execution paths, listed by precedence: Match by Type, Match by Qualifier, Match by Name. One of the differences between @Autowired and @Inject is that @Inject does not have the required field so in case we fail to find a suitable object to inject it will fail while @Autowired can used required=false and allow null able field (only if required!). Advantage of @Inject annotation is that rather than inject a reference directly, you could ask @Inject to inject a Provider. The Provider interface enables, among other things, lazy injection of bean references and injection of multiple instances of a bean. @Named=@Qualifier

22. Cross-Origin
Cross-Origin Resource Sharing (CORS) is a security concept that allows restricting the resources implemented in web browsers. It prevents the JavaScript code producing or consuming the requests against different origin.
For example, your web application is running on 8080 port and by using JavaScript you are trying to consuming RESTful web services from 9090 port. Under such situations, you will face the Cross-Origin Resource Sharing security issue on your web browsers. Two requirements are needed to handle this issue − RESTful web services should support the Cross-Origin Resource Sharing. RESTful web service application should allow accessing the API(s) from the 8080 port. In this chapter, we are going to learn in detail about How to Enable Cross-Origin Requests for a RESTful Web Service application.

23. Intercepter:-
You can use the Interceptor in Spring Boot to perform operations under the following situations −Before sending the request to the controller
Before sending the response to the client, PreHandle(), PostHandle(), afterCompletion(),  HandlerInterceptor Interface

24. @ComponentScan uses string array, like this:
@ComponentScan({"com.my.package.first","com.my.package.second"})
When you provide multiple package names in only one string, Spring interprets this as one package name, and thus can't find it.

26. Spring Framework - Architecture
1) Web MVC/Remoting (Web Socket, Web, Servlet, Portlet)
2) Data Access/Integration (JDBC, ORM, OXM, JSM, Transation)
3) AOP (AOP, Aspect, Instrumentation, Messaging)
4) Core Container(Beans, Core, Context, SpEL)
5. Test (Junit) 

27. @ControllerAdvice
This annotation is applied at the class level. As explained earlier, for each controller you can use @ExceptionHandler on a method that will be called when a given exception occurs. But this handles only those exception that occur within the controller in which it is defined. To overcome this problem you can now use the @ControllerAdvice annotation. This annotation is used to define @ExceptionHandler, @InitBinder and @ModelAttribute methods that apply to all @RequestMapping methods. Thus if you define the @ExceptionHandler annotation on a method in @ControllerAdvice class, it will be applied to all the controllers.





















































https://sqs.ap-south-1.amazonaws.com/636964882678/sample-sqs
Access Key Id :- AKIAZITQQZD3C47EB46R
Secret access key :- qhXYpeGdlej4jfAFXCw2aBhFdRC/ClFaJ+wTmlBl

set RABBIT_URI=amqp://localhost

<spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>
<spring-cloud.version>2020.0.2</spring-cloud.version>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		
			<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


1. Monolithic Architecture
Monolithic Architecture is like a big container wherein all the software components of an application are assembled together and tightly packedged.
2. What is micro services?(Distributed)
While a monolithic application is a single unified unit, a microservices architecture breaks it down into a collection of smaller independent units. These units carry out every application process as a separate service. So all the services have their own logic and the database as well as perform the specific functions.
In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API.Within a microservices architecture, the entire functionality is split up into independently deployable modules which communicate with each other through defined methods called APIs (Application Programming Interfaces). Each service covers its own scope and can be updated, deployed, and scaled independently.
Martin Fowler

3. bodyToMono
means when we request for resource then we get it in future(means asynchronous) so it is called bodyToMono.

4. Eureka server vs eureka client, @loadBalanced(client side service discovery)
5. Webflux body to mono, ParameterisedType
6) Fault Tolerance & Resilient.


https://api.themoviedb.org/3/movie/550?api_key=cea3b7a0b210dblea9f3707365849dd8
https://api.themoviedb.org/3/movie/550?api_key=8fc0ea81788c649875e57e070d7c4df6

#Monolithic Architecture
a) Single jar/war file for whole applocation.
Issues
 Less flexible for large tean and base.
 Overload IDE
 Continuos development is difficult.
 Scaling the app is difficult.
 Scaling development is difficult.
 Technology stack change is difficult.
 
 #Microservice Architecture
 A set of loosely coupled, collaborating srvices. Each service is
 Highly maintainable and testable.
 Loosely coupled with other services
 Indepently deployable
 Capable of being developed by a small team
 Services can be developed independent of each other.
 Communication among service via HTTP/REST/AMQP.
 
 #Microservice Characteristics
 a) Service granularity
 b) Linguistice approach
 c) Technologic agnostic
 d) Some Points
 Microservices is aspecialization of an implementation approach for service-oriented architecture(SOA) used to build flexible, independently deployable software systems.
 Followed the introduction of DevOps.
 Strategy-"Do one thing and do it well."
 
 #Web Services.
a) In a Web service, the Web technology such as HTTP- originally designed for human to man interaction communication is utilized for machine to machine communication.
b) More specifically for transferring machine readable file formats such as XML and JSON.
c) Web service commonly provides an object oriented web-based interface to a database service utilized by another Web server, or by a mobile app, that provides a user interface to the end user.

#REST Service
a) Representational State Transfer
b) Software architetural style that defines a set of constraints to be used for creating Web services.
c) Provide interoperability between computer systems on the internet.
d) Thre is no official standard for RESTful Web APIs.
e) REST was first introduced by Roy Fielding in 2000.
f) REST full API is defined with following
	- Base URI e.g:- 
	- HTTP methods:- get/put/post/delete/patch
	- A media type:-  

What is Eureka?

In simple word Eureka is a service Registry or we can say it is an embedded server provided by Netflix third party which integrate with spring framework.

Main purpose to use Eureka : Micro service Registration and Discovery with Spring Cloud and Netflix's Eureka

What is the use of Eureka?

Normally in Micro Service Architecture Design we are developing separate Services and exposing each API as service Endpoint and whenever we required to access other services in simple we are accessing it  as a Rest client using third party API either Rest Template or Client Builder

#) Slueth
=> It used to trace the request going through multiple microservices. It generates a unique id for each request, such logs push into rabbitMQ, Zipkin server consumes such logs to trace the all request from rabbitMQ

#) Ribbon
=> Here ribbon is used for load balancing.Feign client is used to make call to another application. Ribbon is used to get the instance of another application. Multiple instances can be configured by using the ribbon.

#) Zuul or api gateway(server)
=> Both are a kind of filter. It is a kind of intercepting filters.  

#) First download erlang , rabbitMQ and Zipkin server respectively.

#) config server :- it is used to reading properties file contents from the cloud directory. We can access by http://localhost:7088/test/qa. (file name = test-qa.properties). it is not necessary to restart config server each time. when we changes something inside the properties file instantly reflects into config server but not in config client. We can get the modified value without restaring the client service by including "management.endpoints.web.exposure.include=refresh" endpoint in bootstrap.properties file. And hit the url http://localhost:7089/actuator/refresh as POST Method. The modified value automatically reflects in the client service(only for one instace, here instance means client service running on the port like 7089). One object(instance), one time actuator refreshed. If we have 100 insatces of the same application. We require 100 instances of invocation using actuator. To refresh all the instances of same application at one time we have to use spring cloud bus. It internally use the rabbitMQ. 

management.endpoints.web.exposure.include=refresh (we can use these two inside boostrap.proerties file) 
http://localhost:8082/actuator/bus-refresh

management.endpoints.web.exposure.include=*(we can use this single statement in boostrap.properties file)

we can refresh by using http://localhost:7099/actuator/bus-refresh as post method. We can refresh any one instace automatically reflect in all instances.

#) Hystrix
=> It is mainly used for handling fail over.



































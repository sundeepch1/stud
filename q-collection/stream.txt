1. Method references.
2. Collections improvments
3. Why Lambdas
1) Enables functional programming.
2) Readable and concise code
3) Easier to-use APIs and libraries
4) Enables support for paralle processing.

anonymous class and anonymous function, Type inference
2. Greeting1 greeting = new HelloWorldGreeting(); greeting.perform(); :- It contains instance of type HelloWorldGreeting   
Greeting1 lambda = () -> System.out.println("Foo"); lambda.perform(); :- It contains lambda expressiono of type Greeting1.

3. Streams
A sequence of elements supporting sequential and parallel aggregate operation.

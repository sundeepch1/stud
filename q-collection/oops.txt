1. why use Interface?
1) It is a third party specification.
2) It is used to achieve abstration.
3) It is used to achieve dependency injection.
4) Used as funtional interface in call back method.
5) Marker interface

2. Loose Coupling vs Tight coupling
Let there is class A and B. Class A contains some methods. When we create the object of class A inside B by using new key word to access the method of class A is called tight coupling. Instead of that we create object of class A and pass the object through way(from contructer or setter getter properties) inside class the class of B is called loose coupling and it is also called dependency injection. 

2. Why encapsulation?
1) Encapsulation helps us in binding the data(instance variables) and the member functions(that work on the instance variables) of a class.
2) Encapsulation hides the data(instance variables) of a class from an illegal direct-access.
Rules to encapsulation are -
Keep the access modifiers of instance variables of a class to private or protected.
Enforce calling public getter, setter methods of the class in order to get or set the value of instance variables of the class.
Use the JavaBeans naming convention of getters and setters methods for class methods.

3. Difference between encapsulation and abstraction
While encapsulation helps in hiding the data(instance variables) of a class from an illegal-access, abstraction provides essential general features without providing implementation details, by using an abstract class or an interface.

4. Composition or IS-A relationship between two classes
An IS-A signifies a relationship between the two classes that are connected to each other through inheritance. The basis of an IS-A relationship is -
When a class extends another concrete(non-abstract) class.
When a class extends an abstract class.
When a class implements an interface.

5. Aggregation or HAS-A relationship between two classes.
When class A has a reference to the object of another class B, class A is said to be in a HAS-A relationship with class B. Through this reference of class B in it, class A can call and use the needed features of class B, without copying all the unnecessary code of class B in it.

6. Dependency Injection (DI) is a design pattern used to implement IoC. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways. Using DI, we move the creation and binding of the dependent objects outside of the class that depends on them.Dependency Injection is passing dependency to other objects or framework( dependency injector).dependency injection is a technique in which an object receives other objects that it depends on. 

7. Polymorphism means having many forms, having specific tasks implemented in diffrent ways as per requirements

9. Why method overloading is used?
Method overloading is mainly used in a situation when we want to create multiple specialized versions of a method in a class, with each version having the same name and doing some specific specialized task.

10. method hiding
when method with static keyword in super class, implement such method with same and same signature in sub class then it is called method hiding.

11. Overloading vs overriding
1) The methods with same name and different signature is called method overloading. The method in super class is implemented with same name, same signature and same return type in sub class is called method overriding.
2) we have not right any keyword to overloading methods but @override keyword to overriding methods.
3) overloading is possible either with inheritance or without inheritance but overriding is possible with inheritance.
The return type of overriding method must be a covariant type (same class or sub-class), i.e. you can narrow down the return type.

12. static method 
static method work as utility method in class. when we do not want to create object but use the static method in this case we create static method because creation of object is expensive.

13. Abstract class
if we some default funtionality, and class does not represent any real entity that's why we do not allow to create object that class 

14. What is an immutable class in Java?
Immutable objects are instances whose state doesn’t change after it has been initialized. For example, String is an immutable class and once instantiated its value never changes.

15. Benefits of Immutable Class in Java
1) An immutable class is good for caching purposes because you don’t have to worry about the value changes.
2) Another benefit of immutable class is that it is inherently thread-safe, so you don’t have to worry about thread safety in case of multi-threaded environment.

16. How to Create an immutable class in Java?
To create an immutable class in Java, you have to do the following steps.
Declare the class as final so it can’t be extended.
Make all fields private so that direct access is not allowed.
Don’t provide setter methods for variables.
Make all mutable fields final so that its value can be assigned only once.
Initialize all the fields via a constructor performing deep copy.
Perform cloning of objects in the getter methods to return a copy rather than returning the actual object reference.
if we implement mutable class object then return clone copy of that class. clone with Constructors, clone with serialization























1. How to filter duplicate row from database.
DELETE n1 FROM names n1, names n2 WHERE n1.id > n2.id AND n1.name = n2.name;
SELECT
     day, COUNT(day),
     month, COUNT(month),
     year, COUNT(year)
FROM 
     dates
GROUP BY
     day,
     month,
     year
HAVING 
     COUNT(day) > 1
     AND COUNT(month) > 1
     AND COUNT(year) > 1;

or
delete t1 FROM dates t1
INNER  JOIN dates t2
WHERE
    t1.id > t2.id AND
    t1.day = t2.day AND
    t1.month = t2.month AND
    t1.year = t2.year;

2. Second Highest salary
SELECT MAX(salary) FROM Employee WHERE Salary NOT IN ( SELECT Max(Salary) FROM Employee);
SELECT MAX(Salary) From Employee WHERE Salary < ( SELECT Max(Salary) FROM Employee);

3. select n th highest salary?
SELECT salary FROM Employee ORDER BY salary DESC LIMIT N-1, 1;

4. self join employee and manager
select e.ename as employee, m.ename as manager from employees e join employees m on e.mgrid=m.eid;

2.Joins:- A SQL Join statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are:
1. INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be same.
2. LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.
3.RIGHT JOIN: RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER
4.FULL JOIN: FULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values

INSERT INTO dates (day,month,year) VALUES ('29','January','2011');
INSERT INTO dates (day,month,year) VALUES ('30','January','2011');
INSERT INTO dates (day,month,year) VALUES ('30','January','2011');
INSERT INTO dates (day,month,year) VALUES ('14','February','2018');
INSERT INTO dates (day,month,year) VALUES ('14','February','2018');
INSERT INTO dates (day,month,year) VALUES ('23','March','2018');
INSERT INTO dates (day,month,year) VALUES ('23','March','2018');
INSERT INTO dates (day,month,year) VALUES ('23','March','2019');
INSERT INTO dates (day,month,year) VALUES ('29','October','2019');
INSERT INTO dates (day,month,year) VALUES ('29','November','2019');
INSERT INTO dates (day,month,year) VALUES ('12','November','2017');
INSERT INTO dates (day,month,year) VALUES ('17','August','2018');
INSERT INTO dates (day,month,year) VALUES ('05','June','2016');

5. Many to many relationship
Authers and Books=> One Authers write many books, one book having many authers.
Students and Course => One course having many students, one student studying many courses.
Teacher and Student => One Student study by different teachers and one teacher teaches many students.
college and teacher => one teacher teach in many colleges and one college have many teachers.
developer and project => one project having many developers and one developers works in many projects.
Many to one relationship
department and teacher => one department having many teachers
country to states => one country having many states.
customer to orders => one customer having many orders.
Student to project => one student having many projects.
customer to address => one customer having many address
user to gmail address => one user having many gmail address.
one to one relationship
customer to cart => one customer having one cart
customer to customers details => one customer having one customers details.
One employee belongs to one organization.
One dog belongs to one person (or one family).
One person has one passport.
A car model is made by one company.
A book is published by one company.
A software program is made by one organization.

6. Indexer
A database index is a data structure that improves the speed of operations in a table. Indexes can be created using one or more columns, providing the basis for both rapid random lookups and efficient ordering of access to records. Types Clustered and Secondary Indexes.
Clustered vs Secondary Indexes(non-clustered)
clustered index: 
Cluster index is a type of index which sorts the data rows in the table on their key values
It is created by database engine when user creates primary key in table.
table contains only one clustered index. 
It does not allocate extra memory.
faster.
Extra work for SQL for inserts, updates, and deletes.
vs 
A Non-clustered index stores the data at one location and indices at another location.
User have to intentionally create secondary index by using create index query. 
table contains one than secondary index. 
It allocates extra memory.
slower

7. Finds number of post count where user_id=1;
CREATE TABLE `posts` (
	`id` INT NOT NULL AUTO_INCREMENT,
	`text` TEXT,
	`user_id` INT unsigned NOT NULL,
	`updated_at` TIMESTAMP NOT NULL,
	`created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`)
);

CREATE TABLE `post_likes` (
	`post_id` INT unsigned NOT NULL,
	`user_id` INT unsigned NOT NULL,
	`created_at` TIMESTAMP NOT NULL
);

select id, text, user_id, updated_at, created_at, (select count(post_id) from post_likes where user_id=1) from posts where user_id=1;
or
SELECT p.user_id, COUNT(pl.post_id) FROM posts p inner JOIN post_likes pl on p.user_id = pl.user_id WHERE p.user_id = 1 GROUP BY p.user_id;

8. InnoDB
InnoDB is a storage engine in MySQL. There are quite a few of them, and they all have their pros and cons. InnoDB's greatest strengths are:
1) Support for transactions (giving you support for the ACID property).
2) Row-level locking. Having a more fine grained locking-mechanism gives you higher concurrency compared to, for instance, MyISAM.
3) Foreign key constraints. Allowing you to let the database ensure the integrity of the state of the database, and the relationships between tables.



























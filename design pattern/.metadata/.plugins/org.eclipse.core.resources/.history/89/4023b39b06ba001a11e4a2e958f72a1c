package singleton.design.pattern;

class SingletonSynchronizedMethod {
	private static SingletonSynchronizedMethod instance;

	private SingletonSynchronizedMethod() {
	}

	public static synchronized SingletonSynchronizedMethod getInstance() {
		if (instance == null) {
			instance = new SingletonSynchronizedMethod();
		}
		return instance;
	}
}

class SingletonSynchronized {
	private static SingletonSynchronized instance;

	private SingletonSynchronized() {
	}

	public static SingletonSynchronized getInstance() {
		if (instance == null) {
			synchronized (SingletonSynchronized.class) {
				if (instance == null) {
					instance = new SingletonSynchronized();
				}
			}
		}
		return instance;
	}
}

public class SingletonExample {

	public static void main(String[] args) {

		SingletonEagar eagar = SingletonEagar.getInstance();
		
		System.out.println(eagar);
		
		SingletonEagar eagar2 = SingletonEagar.getInstance();
		 System.out.println(eagar2);
		
//		SingletonSynchronized instance = SingletonSynchronized.getInstance();
//
//		System.out.println(instance);
//
//		SingletonSynchronized instance1 = SingletonSynchronized.getInstance();
//
//		System.out.println(instance1);
	}
}
